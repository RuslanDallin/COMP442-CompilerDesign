START =>PROG
START =>REPTPROG0
START =>STRUCTORIMPLORFUNC REPTPROG0
START =>FUNCDEF REPTPROG0
START =>FUNCHEAD FUNCBODY REPTPROG0
START =>func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer ARRAYSIZE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ARRAYSIZE2 REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ] REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  FPARAMSTAIL REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , id : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> void FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovoid { REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { VARDECL REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; VARDECL REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; VARDECL REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; VARDECL REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = id    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = id     EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = id      ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( RELEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( ARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( TERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( id   RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( id    RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( id     RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( id     < ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < id   RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < id    RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < id    ADDOP TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < id    - TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum  RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( RELEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( ARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( TERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( id   RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( id    RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( id     RELOP ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( id     < ARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < id   RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < id    RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < id    ADDOP TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < id    - TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - id   RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - id    RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - id    ADDOP TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - id    - TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum  RIGHTRECARITHEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { STATEMENT REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( RELEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( ARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( TERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( id INDICE REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( id [ ARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ id   RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ id    RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ id     ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]   RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]    RIGHTRECARITHEXPR RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     RELOP ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > ARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > TERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > id INDICE REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > id [ ARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ id   RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ id    RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ id    ADDOP TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ id    + TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]   RIGHTRECTERM RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]    RIGHTRECARITHEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { STATEMENT REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { id STATEMENTIDNEST ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { id ASSIGNOP EXPR ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { id = EXPR ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = ARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = id INDICE REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = id [ ARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ id   RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ id    RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ id     ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]    RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]     EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; STATEMENT REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; id STATEMENTIDNEST ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ id   RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ id    RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ id     ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  ASSIGNOP EXPR ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = EXPR ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = ARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = id INDICE REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = id [ ARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ id   RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ id    RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ id    ADDOP TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ id    + TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]    RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]     EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; STATEMENT REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; id STATEMENTIDNEST ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ id   RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ id    RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ id    ADDOP TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ id    + TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  ASSIGNOP EXPR ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = EXPR ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = ARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = id    RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = id     EXPR2 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = id      ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; STATEMENT REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; id STATEMENTIDNEST ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; id ASSIGNOP EXPR ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; id = EXPR ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = ARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = id    RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = id    ADDOP TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = id    + TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum  RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum   EXPR2 ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; id STATEMENTIDNEST ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; id ASSIGNOP EXPR ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; id = EXPR ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = ARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = id    RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = id    ADDOP TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = id    + TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum  RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum   EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } STRUCTORIMPLORFUNC REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } FUNCDEF REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } FUNCHEAD FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer ARRAYSIZE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ARRAYSIZE2 REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ] REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  FPARAMSTAIL REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , id : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> void FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovoid { REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { VARDECL REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; VARDECL REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = id    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = id     EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = id      ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( RELEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( ARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( TERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( id   RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( id    RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( id     RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( id     < ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < id   RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < id    RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < id     ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( EXPR ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( ARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( id INDICE REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( id [ ARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ id   RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ id    RIGHTRECARITHEXPR ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ id     ] REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]    RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]     EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; id STATEMENTIDNEST ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; id ASSIGNOP EXPR ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; id = EXPR ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = ARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = id    RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = id    ADDOP TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = id    + TERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum  RIGHTRECARITHEXPR EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum   EXPR2 ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } STRUCTORIMPLORFUNC REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } FUNCDEF REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } FUNCHEAD FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> void FUNCBODY REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovoid { REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { VARDECL REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer ARRAYSIZE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ ARRAYSIZE2 REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ] REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id INDICE REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id [ ARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum  RIGHTRECARITHEXPR ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ] REPTIDNEST1 STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  STATEMENTIDNEST3 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; id ( APARAMS ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( EXPR REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( ARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id    RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id     EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id      REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id      APARAMSTAIL REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( id      , EXPR REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , ARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum   EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum    REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; id ( APARAMS ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( EXPR REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( ARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id    RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id     EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id      REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id      APARAMSTAIL REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( id      , EXPR REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , ARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum   EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum    REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; id ( APARAMS ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( EXPR REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( ARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id    RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id     EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id      REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id      APARAMSTAIL REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( id      , EXPR REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , ARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum   EXPR2 REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum    REPTAPARAMS1 ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     ) STATEMENTIDNEST2 ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; REPTFUNCBODY1 } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ;  } REPTPROG0
START =>func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; assign = intnum    ; assign = intnum    ; while ( lt     < minus    - intnum   ) { while ( lt     < minus    - minus    - intnum   ) { if ( lsqbr [ rsqbr     ]     > lsqbr [ plus    + intnum   ]     ) then { assign = lsqbr [ rsqbr     ]      ; lsqbr [ rsqbr     ]  = lsqbr [ plus    + intnum   ]      ; lsqbr [ plus    + intnum   ]  = semi      ;  } else  ; assign = plus    + intnum    ;  } ; assign = plus    + intnum    ;  } ;  } func func ( colon : integer [ ]  , comma : integer   ) -> vovolcurbr { let let : integer  ; let let : integer  ; assign = semi      ; assign = intnum    ; while ( lt     < rpar     ) { write ( lsqbr [ rsqbr     ]      ) ; assign = plus    + intnum    ;  } ;  } func func (  ) -> vovolcurbr { let let : integer [ intnum ]  ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lsqbr [ intnum   ]  = intnum    ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ; lpar ( comma      , intnum     )  ;  } 
