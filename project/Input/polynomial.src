
// ====== struct declarations ====== //
struct POLYNOMIAL {
	public func evaluate(x: float) -> float;
};

struct LINEAR inherits POLYNOMIAL {
	private let a: float;
	private let b: float;
	public  func build(A: float, B: float) -> LINEAR;
	public  func evaluate(x: float) -> float;
};

struct QUADRATIC inherits POLYNOMIAL {
	private let a: float;
	private let b: float;
	private let c: float;
	public  func build(A: float, B: float, C: float) -> QUADRATIC;
	public  func evaluate(x: float) -> float;
};

// ====== struct implementations ====== //
impl POLYNOMIAL {
  func evaluate(x: float) -> float                                // 2.1, 2.2
  {
    return (0);                                                   // 2.3
  }
}

impl QUADRATIC {
  func evaluate(x: float) -> float                                // 2.1, 2.2
  {
    let result: float;                                            // 1.1
    //Using Horner's method
    result = a;                                                   // 3.1
    result = result * x + b;                                      // 3.1, 5.1
    result = result * x + c;                                      // 3.1, 5.1
    return (result);                                              // 2.3
  }
  func build(A: float, B: float, C: float) -> QUADRATIC           // 2.1, 2.2
  {
    let new_function: QUADRATIC ;                                 // 1.3
    new_function.a = A;// 3.1, 5.3
    new_function.b = B;// 3.1, 5.3
    new_function.c = C;// 3.1, 5.3
    return (new_function);                                        // 2.3
  }
}

impl LINEAR {
  func build(A: float, B: float) -> LINEAR                        // 2.1, 2.2
  {
    let new_function: LINEAR;                                     // 1.3
    new_function.a = A;                                           // 3.1, 5.3
    new_function.b = B;                                           // 3.1, 5.3
    return (new_function);                                        // 2.3
  }
  func evaluate(x: float) -> float                                // 2.1, 2.2
  {
    let result[2]: float;                                            // 1.1
    result = 0.0;                                                 // 3.1
    result = a * x + b;                                           // 3.1, 5.1
    return (result);                                              // 2.3
  }
}

// ====== main ====== //
func main() -> void                                               // 2.1, 2.2
{
  let f1: LINEAR;                                                 // 1.3
  let f2: QUADRATIC;                                              // 1.3
  let counter: integer;                                           // 1.1
  f1 = f1.build(2, 3.5);                                          // 2.1, 2.2, 2.4
  f2 = f2.build(-2.0, 1.0, 0.0);                                  // 2.1, 2.2, 2.4
  counter = 1;                                                    // 3.1

  while(counter <= 10)                                            // 3.3, 5.1
  {
    write(counter);                                               // 3.4
    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4
    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4
  };
}func main2() -> void                                               // 2.1, 2.2
{
  let f1: LINEAR;                                                 // 1.3
  let f2: QUADRATIC;                                              // 1.3
  let counter: integer;                                           // 1.1
  f1 = f1.build(2, 3.5);                                          // 2.1, 2.2, 2.4
  f2 = f2.build(-2.0, 1.0, 0.0);                                  // 2.1, 2.2, 2.4
  counter = 1;                                                    // 3.1

  while(counter <= 10)                                            // 3.3, 5.1
  {
    write(counter);                                               // 3.4
    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4
    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4
  };
}