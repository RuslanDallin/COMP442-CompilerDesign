START =>PROG
START =>/e/ REPTPROG0  /progSubtree/
START =>/e/ STRUCTORIMPLORFUNC REPTPROG0  /progSubtree/
START =>/e/ /e/ FUNCDEF   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ FUNCHEAD FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ FPARAMS /fparmListSubtree/ ) -> RETURNTYPE FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> RETURNTYPE FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( EXPR ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( ARITHEXPR EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/   RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    EXPR2 ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    RELOP ARITHEXPR /relOpSubtree/ ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == ARITHEXPR /relOpSubtree/ ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == TERM RIGHTRECARITHEXPR /relOpSubtree/ ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == FACTOR RIGHTRECTERM RIGHTRECARITHEXPR /relOpSubtree/ ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == floatnum /floatNode/ RIGHTRECTERM RIGHTRECARITHEXPR /relOpSubtree/ ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == floatnum /floatNode/ RIGHTRECTERM RIGHTRECARITHEXPR /relOpSubtree/ ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == floatnum /floatNode/  RIGHTRECARITHEXPR /relOpSubtree/ ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == floatnum /floatNode/   /relOpSubtree/ ) ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == floatnum /floatNode/   /relOpSubtree/ ) ;  /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ write ( id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/    == floatnum /floatNode/   /relOpSubtree/ ) ;  /funcBodySubtree/ }   /funcDefSubtree/   /progSubtree/
