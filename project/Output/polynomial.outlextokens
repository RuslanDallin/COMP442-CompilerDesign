[inlinecmt, '//====== struct declarations ====== //', 1]
[struct, struct, 2][id, polynomial, 2][lcurbr, {, 2]
[public, public, 3][func, func, 3][id, evaluate, 3][lpar, (, 3][id, x, 3][colon, :, 3][float, float, 3][rpar, ), 3][arrow, ->, 3][float, float, 3][semi, ;, 3]
[rcurbr, }, 4][semi, ;, 4]
[struct, struct, 6][id, linear, 6][inherits, inherits, 6][id, polynomial, 6][lcurbr, {, 6]
[private, private, 7][let, let, 7][id, a, 7][colon, :, 7][float, float, 7][semi, ;, 7]
[private, private, 8][let, let, 8][id, b, 8][colon, :, 8][float, float, 8][semi, ;, 8]
[public, public, 9][func, func, 9][id, build, 9][lpar, (, 9][id, a, 9][colon, :, 9][float, float, 9][comma, ,, 9][id, b, 9][colon, :, 9][float, float, 9][rpar, ), 9][arrow, ->, 9][id, linear, 9][semi, ;, 9]
[public, public, 10][func, func, 10][id, evaluate, 10][lpar, (, 10][id, x, 10][colon, :, 10][float, float, 10][rpar, ), 10][arrow, ->, 10][float, float, 10][semi, ;, 10]
[rcurbr, }, 11][semi, ;, 11]
[struct, struct, 13][id, quadratic, 13][inherits, inherits, 13][id, polynomial, 13][lcurbr, {, 13]
[private, private, 14][let, let, 14][id, a, 14][colon, :, 14][float, float, 14][semi, ;, 14]
[private, private, 15][let, let, 15][id, b, 15][colon, :, 15][float, float, 15][semi, ;, 15]
[private, private, 16][let, let, 16][id, c, 16][colon, :, 16][float, float, 16][semi, ;, 16]
[public, public, 17][func, func, 17][id, build, 17][lpar, (, 17][id, a, 17][colon, :, 17][float, float, 17][comma, ,, 17][id, b, 17][colon, :, 17][float, float, 17][comma, ,, 17][id, c, 17][colon, :, 17][float, float, 17][rpar, ), 17][arrow, ->, 17][id, quadratic, 17][semi, ;, 17]
[public, public, 18][func, func, 18][id, evaluate, 18][lpar, (, 18][id, x, 18][colon, :, 18][float, float, 18][rpar, ), 18][arrow, ->, 18][float, float, 18][semi, ;, 18]
[rcurbr, }, 19][semi, ;, 19]
[inlinecmt, '//====== struct implementations ====== //', 21]
[impl, impl, 22][id, polynomial, 22][lcurbr, {, 22]
[func, func, 23][id, evaluate, 23][lpar, (, 23][id, x, 23][colon, :, 23][float, float, 23][rpar, ), 23][arrow, ->, 23][float, float, 23]
[lcurbr, {, 24]
[return, return, 25][lpar, (, 25][intnum, 0, 25][rpar, ), 25][semi, ;, 25]
[rcurbr, }, 26]
[rcurbr, }, 27]
[impl, impl, 29][id, quadratic, 29][lcurbr, {, 29]
[func, func, 30][id, evaluate, 30][lpar, (, 30][id, x, 30][colon, :, 30][float, float, 30][rpar, ), 30][arrow, ->, 30][float, float, 30]
[lcurbr, {, 31]
[let, let, 32][id, result, 32][colon, :, 32][float, float, 32][semi, ;, 32]
[inlinecmt, "//using horner's method", 33]
[id, result, 34][assign, =, 34][id, a, 34][semi, ;, 34]
[id, result, 35][assign, =, 35][id, result, 35][mult, *, 35][id, x, 35][plus, +, 35][id, b, 35][semi, ;, 35]
[id, result, 36][assign, =, 36][id, result, 36][mult, *, 36][id, x, 36][plus, +, 36][id, c, 36][semi, ;, 36]
[return, return, 37][lpar, (, 37][id, result, 37][rpar, ), 37][semi, ;, 37]
[rcurbr, }, 38]
[func, func, 39][id, build, 39][lpar, (, 39][id, a, 39][colon, :, 39][float, float, 39][comma, ,, 39][id, b, 39][colon, :, 39][float, float, 39][comma, ,, 39][id, c, 39][colon, :, 39][float, float, 39][rpar, ), 39][arrow, ->, 39][id, quadratic, 39]
[lcurbr, {, 40]
[let, let, 41][id, new_function, 41][colon, :, 41][id, quadratic, 41][semi, ;, 41]
[id, new_function, 42][dot, ., 42][id, a, 42][assign, =, 42][id, a, 42][semi, ;, 42]
[id, new_function, 43][dot, ., 43][id, b, 43][assign, =, 43][id, b, 43][semi, ;, 43]
[id, new_function, 44][dot, ., 44][id, c, 44][assign, =, 44][id, c, 44][semi, ;, 44]
[return, return, 45][lpar, (, 45][id, new_function, 45][rpar, ), 45][semi, ;, 45]
[rcurbr, }, 46]
[rcurbr, }, 47]
[impl, impl, 49][id, linear, 49][lcurbr, {, 49]
[func, func, 50][id, build, 50][lpar, (, 50][id, a, 50][colon, :, 50][float, float, 50][comma, ,, 50][id, b, 50][colon, :, 50][float, float, 50][rpar, ), 50][arrow, ->, 50][id, linear, 50]
[lcurbr, {, 51]
[let, let, 52][id, new_function, 52][colon, :, 52][id, linear, 52][semi, ;, 52]
[id, new_function, 53][dot, ., 53][id, a, 53][assign, =, 53][id, a, 53][semi, ;, 53]
[id, new_function, 54][dot, ., 54][id, b, 54][assign, =, 54][id, b, 54][semi, ;, 54]
[return, return, 55][lpar, (, 55][id, new_function, 55][rpar, ), 55][semi, ;, 55]
[rcurbr, }, 56]
[func, func, 57][id, evaluate, 57][lpar, (, 57][id, x, 57][colon, :, 57][float, float, 57][rpar, ), 57][arrow, ->, 57][float, float, 57]
[lcurbr, {, 58]
[let, let, 59][id, result, 59][colon, :, 59][float, float, 59][semi, ;, 59]
[id, result, 60][assign, =, 60][floatnum, 0.0, 60][semi, ;, 60]
[id, result, 61][assign, =, 61][id, a, 61][mult, *, 61][id, x, 61][plus, +, 61][id, b, 61][semi, ;, 61]
[return, return, 62][lpar, (, 62][id, result, 62][rpar, ), 62][semi, ;, 62]
[rcurbr, }, 63]
[rcurbr, }, 64]
[inlinecmt, '//====== main ====== //', 66]
[func, func, 67][id, main, 67][lpar, (, 67][rpar, ), 67][arrow, ->, 67][void, void, 67]
[lcurbr, {, 68]
[let, let, 69][id, f1, 69][colon, :, 69][id, linear, 69][semi, ;, 69]
[let, let, 70][id, f2, 70][colon, :, 70][id, quadratic, 70][semi, ;, 70]
[let, let, 71][id, counter, 71][colon, :, 71][integer, integer, 71][semi, ;, 71]
[id, f1, 72][assign, =, 72][id, f1, 72][dot, ., 72][id, build, 72][lpar, (, 72][intnum, 2, 72][comma, ,, 72][floatnum, 3.5, 72][rpar, ), 72][semi, ;, 72]
[id, f2, 73][assign, =, 73][id, f2, 73][dot, ., 73][id, build, 73][lpar, (, 73][minus, -, 73][floatnum, 2.0, 73][comma, ,, 73][floatnum, 1.0, 73][comma, ,, 73][floatnum, 0.0, 73][rpar, ), 73][semi, ;, 73]
[id, counter, 74][assign, =, 74][intnum, 1, 74][semi, ;, 74]
[while, while, 76][lpar, (, 76][id, counter, 76][leq, <=, 76][intnum, 10, 76][rpar, ), 76]
[lcurbr, {, 77]
[write, write, 78][lpar, (, 78][id, counter, 78][rpar, ), 78][semi, ;, 78]
[write, write, 79][lpar, (, 79][id, f1, 79][dot, ., 79][id, evaluate, 79][lpar, (, 79][id, counter, 79][rpar, ), 79][rpar, ), 79][semi, ;, 79]
[write, write, 80][lpar, (, 80][id, f2, 80][dot, ., 80][id, evaluate, 80][lpar, (, 80][id, counter, 80][rpar, ), 80][rpar, ), 80][semi, ;, 80]
[rcurbr, }, 81][semi, ;, 81]
[rcurbr, }, 82]
[blockcmt, '/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|x| multiple class declarations\n|x| no data member declaration\n|x| data member declaration\n|x| multiple data member declaration\n| | no member function declaration\n|x| member function declaration\n|x| multiple member function declaration\n| | no member\n|x| no inherited class\n|x| one inherited class\n| | multiple inherited classes\n|x| private member specifier\n|x| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|x| main function definition\n|x| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|x| member function definition\n|x| multiple member function definitions\n| | return type: void\n| | return type: integer\n|x| return type: float\n|x| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|x| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|x| member function call\n| | parameters:0\n|x| parameters:1\n|x| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|x| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|x| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|x| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|x| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|x| while statement\n| | while: empty block\n| | while: 1-statement block\n|x| while: n-statement block\n| | read(<variable>) statement\n|x| write(<expr>) statement\n|x| return(<expr>) statement\n|x| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|x| id\n|x| id.id\n|x| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|x| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|x| involving variable + idnest\n|x| involving function calls\n| | involving all the above in one expression\n*/', 83]