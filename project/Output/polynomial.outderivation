START =>PROG
START =>/e/ REPTPROG0  /progSubtree/
START =>/e/ STRUCTORIMPLORFUNC REPTPROG0  /progSubtree/
START =>/e/ /e/ FUNCDEF   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ FUNCHEAD FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ FPARAMS /fparmListSubtree/ ) -> RETURNTYPE FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> RETURNTYPE FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ ASSIGNOP EXPR  /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = EXPR  /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = ARITHEXPR EXPR2  /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2  /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2  /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2  /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2  /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2  /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = /e/ intnum /numNode/ /factorSubtree/     /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = /e/ intnum /numNode/ /factorSubtree/     /assignSubtree/ ;  /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void  /typeNode/ { /e/ id  /IdNode/ = /e/ intnum /numNode/ /factorSubtree/     /assignSubtree/ ;  /funcBodySubtree/ }   /funcDefSubtree/   /progSubtree/
