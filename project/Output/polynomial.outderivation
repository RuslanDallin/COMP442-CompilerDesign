START =>PROG
START =>REPTPROG0
START =>STRUCTORIMPLORFUNC REPTPROG0
START =>STRUCTDECL REPTPROG0
START =>struct id OPTSTRUCTDECL2 { REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public FUNCDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public FUNCHEAD ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func id ( FPARAMS ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float  REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> TYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; STRUCTORIMPLORFUNC REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; STRUCTDECL REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct id OPTSTRUCTDECL2 { REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits id REPTOPTSTRUCTDECL22 { REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private VARDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let id : TYPE REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private VARDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let id : TYPE REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public FUNCDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public FUNCHEAD ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func id ( FPARAMS ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  FPARAMSTAIL REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , id : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float  REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> TYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> id ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public FUNCDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public FUNCHEAD ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func id ( FPARAMS ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float  REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> TYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; STRUCTORIMPLORFUNC REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; STRUCTDECL REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct id OPTSTRUCTDECL2 { REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits id REPTOPTSTRUCTDECL22 { REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private VARDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let id : TYPE REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private VARDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let id : TYPE REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private VARDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let id : TYPE REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float REPTVARDECL4 ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public FUNCDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public FUNCHEAD ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func id ( FPARAMS ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  FPARAMSTAIL REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , id : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  FPARAMSTAIL REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , id : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float  REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> TYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> id ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; VISIBILITY MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public MEMBERDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public FUNCDECL REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public FUNCHEAD ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func id ( FPARAMS ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float  REPTFPARAMS4 ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> RETURNTYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> TYPE ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ; REPTSTRUCTDECL4 } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; STRUCTORIMPLORFUNC REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; IMPLDEF REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl id { REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { FUNCDEF REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { FUNCHEAD FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> TYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( EXPR ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( ARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum  RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum   EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } STRUCTORIMPLORFUNC REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } IMPLDEF REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl id { REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { FUNCDEF REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { FUNCHEAD FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> TYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { VARDECL REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float REPTVARDECL4 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   MULTOP FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    ADDOP TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   MULTOP FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    ADDOP TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( EXPR ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( ARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result    RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result     EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } FUNCDEF REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } FUNCHEAD FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  FPARAMSTAIL REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , id : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  FPARAMSTAIL REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , id : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> TYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> id FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { VARDECL REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : id REPTVARDECL4 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( EXPR ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( ARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function    RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function     EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } STRUCTORIMPLORFUNC REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } IMPLDEF REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl id { REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { FUNCDEF REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { FUNCHEAD FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  FPARAMSTAIL REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , id : TYPE REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float REPTFPARAMSTAIL4 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> TYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> id FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { VARDECL REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : id REPTVARDECL4 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( EXPR ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( ARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function    RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function     EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } FUNCDEF REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } FUNCHEAD FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> RETURNTYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> TYPE FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float FUNCBODY REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { VARDECL REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float REPTVARDECL4 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum   EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = EXPR ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   MULTOP FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    ADDOP TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b    RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b     EXPR2 ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; VARDECLORSTAT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; STATEMENT REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( EXPR ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( ARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result    RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result     EXPR2 ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ; REPTFUNCBODY1 } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  } REPTIMPLDEF3 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } STRUCTORIMPLORFUNC REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } FUNCDEF REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } FUNCHEAD FUNCBODY REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func id ( FPARAMS ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> RETURNTYPE FUNCBODY REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> void FUNCBODY REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> void { REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> void { VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> void { VARDECL REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> void { let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let id : id REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : id  ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : id  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : id  ; VARDECL REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : id  ; let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let id : id REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : id  ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : id  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : id  ; VARDECL REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : id  ; let id : TYPE REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let id : integer REPTVARDECL4 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let id : integer  ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let id : integer  ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let id : integer  ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let id : integer  ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; id = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; id = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; id = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; id = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = id  IDNEST REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = id  . id IDNEST2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( APARAMS ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( EXPR REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( ARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum   EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    APARAMSTAIL REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , EXPR REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , ARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum   EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum    REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum     ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum     )  RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum     )   RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum     )    EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum     )     ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum     )     ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum     )     ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . id ( intnum    , floatnum     )     ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; id = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; id = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; id = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; id = id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = id  IDNEST REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = id  . id IDNEST2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( APARAMS ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( EXPR REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( ARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( SIGN FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum   EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    APARAMSTAIL REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , EXPR REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , ARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum   EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    APARAMSTAIL REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , EXPR REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , ARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum   EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum    REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum     ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum     )  RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum     )   RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum     )    EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum     )     ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum     )     ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum     )     ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . id ( - floatnum    , floatnum    , floatnum     )     ; id STATEMENTIDNEST ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id ASSIGNOP EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = EXPR ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = ARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = TERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum  RIGHTRECARITHEXPR EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum   EXPR2 ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum    ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum    ; VARDECLORSTAT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum    ; STATEMENT REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum    ; while ( RELEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum    ; while ( ARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum    ; while ( TERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum    ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; id = intnum    ; while ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id   RIGHTRECTERM RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id    RIGHTRECARITHEXPR RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     RELOP ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= ARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= TERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum RIGHTRECTERM RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum  RIGHTRECARITHEXPR ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum   ) STATBLOCK ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum   ) { REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum   ) { STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum   ) { write ( EXPR ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum   ) { write ( ARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum   ) { write ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum   ) { write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( id     <= intnum   ) { write ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id    RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id     EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id      ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id      ) ; STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id      ) ; write ( EXPR ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id      ) ; write ( ARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id      ) ; write ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id      ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( id      ) ; write ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( id  IDNEST REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( id  . id IDNEST2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . id ( APARAMS ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . id ( EXPR REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . id ( ARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . id ( TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . id ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . id ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id    RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id     EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id      REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )  RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )   RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )    EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )     ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )     ) ; STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )     ) ; write ( EXPR ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )     ) ; write ( ARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )     ) ; write ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )     ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( id       )     ) ; write ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( id  IDNEST REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( id  . id IDNEST2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . id ( APARAMS ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . id ( EXPR REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . id ( ARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . id ( TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . id ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . id ( id FACTOR2 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id REPTIDNEST1 REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id  REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id   RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id    RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id     EXPR2 REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id      REPTAPARAMS1 ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id       ) REPTVARIABLEORFUNCTIONCALL RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id       )  RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id       )   RIGHTRECARITHEXPR EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id       )    EXPR2 ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id       )     ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id       )     ) ;  } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id       )     ) ;  } ; REPTFUNCBODY1 } REPTPROG0
START =>struct polynomial  { public func evaluate ( x : float   ) -> float ;  } ; struct linear inherits polynomial  { private let a : float  ; private let b : float  ; public func build ( a : float  , b : float   ) -> linear ; public func evaluate ( x : float   ) -> float ;  } ; struct quadratic inherits polynomial  { private let a : float  ; private let b : float  ; private let c : float  ; public func build ( a : float  , b : float  , c : float   ) -> quadratic ; public func evaluate ( x : float   ) -> float ;  } ; impl polynomial { func evaluate ( x : float   ) -> float { return ( intnum    ) ;  }  } impl quadratic { func evaluate ( x : float   ) -> float { let result : float  ; result = a      ; result = result   * x    + b      ; result = result   * x    + c      ; return ( result      ) ;  } func build ( a : float  , b : float  , c : float   ) -> quadratic { let new_function : quadratic  ; new_function . a = a      ; new_function . b = b      ; new_function . c = c      ; return ( new_function      ) ;  }  } impl linear { func build ( a : float  , b : float   ) -> linear { let new_function : linear  ; new_function . a = a      ; new_function . b = b      ; return ( new_function      ) ;  } func evaluate ( x : float   ) -> float { let result : float  ; result = floatnum    ; result = a   * x    + b      ; return ( result      ) ;  }  } func main (  ) -> vof1 { let linear : f2  ; let quadratic : counter  ; let f1 : integer  ; f1 = build  . f2 ( intnum    , floatnum     )     ; f2 = build  . counter ( - floatnum    , floatnum    , floatnum     )     ; counter = intnum    ; while ( counter     <= intnum   ) { write ( f1      ) ; write ( evaluate  . counter ( f2       )     ) ; write ( evaluate  . counter ( id       )     ) ;  } ; REPTFUNCBODY1 } 
