START =>PROG
START =>/e/ REPTPROG0  /progSubtree/
START =>/e/ STRUCTORIMPLORFUNC REPTPROG0  /progSubtree/
START =>/e/ /e/ IMPLDEF /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ FUNCDEF  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ FUNCHEAD FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( FPARAMS ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> TYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { VARDECLORSTAT REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { STATEMENT REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( EXPR ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( ARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum  RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum   EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ FUNCDEF  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ FUNCHEAD FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( FPARAMS ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : TYPE REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float REPTFPARAMS3 REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float  REPTFPARAMS4 ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> RETURNTYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> TYPE FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float FUNCBODY  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { VARDECLORSTAT REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { STATEMENT REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( EXPR ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( ARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( TERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum  RIGHTRECARITHEXPR EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum   EXPR2 ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum    ) ; REPTFUNCBODY1 }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/   /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/   /funcDefListSubtree/ } /implDefSubtree/ STRUCTORIMPLORFUNC REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/   /funcDefListSubtree/ } /implDefSubtree/ /e/ IMPLDEF /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/   /funcDefListSubtree/ } /implDefSubtree/ /e/ impl id /idNode/ { /e/ REPTIMPLDEF3 /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/   /funcDefListSubtree/ } /implDefSubtree/ /e/ impl id /idNode/ { /e/  /funcDefListSubtree/ } /implDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ impl id /idNode/ { /e/ /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/  /e/ func id ( id : float   ) -> float { return ( intnum    ) ;  }  /funcDefSubtree/   /funcDefListSubtree/ } /implDefSubtree/ /e/ impl id /idNode/ { /e/  /funcDefListSubtree/ } /implDefSubtree/   /progSubtree/
