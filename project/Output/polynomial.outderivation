START =>PROG
START =>/e/ REPTPROG0  /progSubtree/
START =>/e/ STRUCTORIMPLORFUNC REPTPROG0  /progSubtree/
START =>/e/ /e/ FUNCDEF   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ FUNCHEAD FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ FPARAMS /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : TYPE  /typeNode/ /e/ REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ ARRAYSIZE REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ARRAYSIZE2 REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ] REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ FPARAMSTAIL REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : TYPE /typeNode/ /e/ REPTFPARAMSTAIL4 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/ REPTFPARAMSTAIL4 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  VARDECL /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : TYPE  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  VARDECL /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : TYPE  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  VARDECL /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : TYPE  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  VARDECL /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : TYPE  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( RELEXPR ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( ARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( TERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ TERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( RELEXPR ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( ARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( TERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ TERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) STATBLOCK ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { STATEMENT REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( RELEXPR ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( ARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( TERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ ARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ TERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR  /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then STATBLOCK else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { STATEMENT REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ STATEMENTIDNEST ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = EXPR /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; STATEMENT REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; STATEMENT REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2   /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; REPTSTATBLOCK1 } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else STATBLOCK ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; STATEMENT REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ STATEMENTIDNEST ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = EXPR /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ STATEMENTIDNEST ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = EXPR /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ STRUCTORIMPLORFUNC REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ FUNCDEF   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ FUNCHEAD FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ FPARAMS /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : TYPE  /typeNode/ /e/ REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ ARRAYSIZE REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ARRAYSIZE2 REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ] REPTFPARAMS3 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ FPARAMSTAIL REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : TYPE /typeNode/ /e/ REPTFPARAMSTAIL4 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/ REPTFPARAMSTAIL4 /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/ REPTFPARAMS4 /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  VARDECL /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : TYPE  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  VARDECL /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : TYPE  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = EXPR /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2 /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( RELEXPR ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( ARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( TERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   RELOP /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ ARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ TERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR  /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) STATBLOCK ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ EXPR /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ ARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ TERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2 /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; STATEMENT REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ STATEMENTIDNEST ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ ASSIGNOP EXPR /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = EXPR /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = ARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = TERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  ADDOP  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ TERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ FACTOR RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM  /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/ RIGHTRECARITHEXPR EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  EXPR2 /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ; REPTSTATBLOCK1 } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ STRUCTORIMPLORFUNC REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ FUNCDEF   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ FUNCHEAD FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ FPARAMS /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> RETURNTYPE /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ FUNCBODY   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  VARDECL /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : TYPE  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ ARRAYSIZE REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ ARRAYSIZE2 REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ] REPTVARDECL4 /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ INDICE REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ ARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ TERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ] REPTIDNEST1 /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ STATEMENTIDNEST3 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ ASSIGNOP EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = EXPR   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = ARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = TERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/   EXPR2   /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ APARAMS /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ EXPR REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ ARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    APARAMSTAIL REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , EXPR REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , ARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/   EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/    REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ APARAMS /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ EXPR REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ ARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    APARAMSTAIL REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , EXPR REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , ARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/   EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/    REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; VARDECLORSTAT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; STATEMENT REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ STATEMENTIDNEST ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ APARAMS /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ EXPR REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ ARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ FACTOR2 REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/ REPTIDNEST1 /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/ REPTVARIABLEORFUNCTIONCALL /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    APARAMSTAIL REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , EXPR REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , ARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , TERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/ RIGHTRECTERM RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/  RIGHTRECARITHEXPR EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/   EXPR2 REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/    REPTAPARAMS1 /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ ) STATEMENTIDNEST2 ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; REPTFUNCBODY1 /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ;  /funcBodySubtree/ }   /funcDefSubtree/ REPTPROG0  /progSubtree/
START =>/e/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  -  /addOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   /addOpSubtree/ -  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /relOpSubtree/ ) { if ( /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/   > /relOpNode/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) then { id /IdNode/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/  ]  /indiceListSubtree/  /varSubtree/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/      /assignSubtree/ ;  } else  ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/ /e/ id /IdNode/ : integer  /typeNode/ /e/ [ ]  /dimListSubtree/ /varDeclSubtree/ /e/ , id  /IdNode/ : integer /typeNode/ /e/  /dimListSubtree/ /varDeclSubtree/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ /e/  let id /IdNode/ : integer  /typeNode/  /e/  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /assignSubtree/ ; id /IdNode/ = /e/ intnum /numNode/ /factorSubtree/    /assignSubtree/ ; while ( /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   < /relOpNode/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /relOpSubtree/ ) { write ( /e/ /e/ id /IdNode/ /e/ [ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/  /factorSubtree/    /writeSubtree/ ) ; id /IdNode/ = /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/  +  /addOpNode/ /e/ intnum /numNode/ /factorSubtree/   /addOpSubtree/   /assignSubtree/ ;  } ;  /funcBodySubtree/ }   /funcDefSubtree/ /e/ func id /IdNode/ ( /e/  /fparmListSubtree/ ) -> void /typeNode/ { /e/ /e/  let id /IdNode/ : integer  /typeNode/  /e/ [ intnum /numNode/ ]  /dimListSubtree/ ; /varDeclSubtree/ id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ /e/ [ /e/ intnum /numNode/ /factorSubtree/   ]  /indiceListSubtree/  /varSubtree/ = /e/ intnum /numNode/ /factorSubtree/      /assignSubtree/ ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ; id /IdNode/ ( /e/ /e/ id /IdNode/ /e/  /indiceListSubtree/  /varSubtree/  /factorSubtree/    , /e/ intnum /numNode/ /factorSubtree/     /aParamsSubtree/ /funCallSubtree/ )  ;  /funcBodySubtree/ }   /funcDefSubtree/   /progSubtree/
